import subprocess
import zipfile
import os
import shutil

# T√©l√©charger les fichiers de la comp√©tition Kaggle
def download_kaggle_data():
    if not os.path.exists('quora-question-pairs.zip'):  # V√©rifie si le fichier zip est d√©j√† t√©l√©charg√©
        try:
            subprocess.run(["kaggle", "competitions", "download", "-c", "quora-question-pairs"], check=True)
            print("‚úÖ T√©l√©chargement termin√© avec succ√®s.")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Une erreur est survenue lors du t√©l√©chargement : {e}")
    else:
        print("üìÇ 'quora-question-pairs.zip' est d√©j√† t√©l√©charg√©.")

# D√©compresser le fichier quora-question-pairs.zip dans le r√©pertoire quora_data
def unzip_quora_zip():
    if os.path.exists('quora-question-pairs.zip'):
        if not os.path.exists('quora_data'):  # V√©rifie si le dossier quora_data existe
            os.makedirs('quora_data')  # Cr√©e le r√©pertoire quora_data s'il n'existe pas
        if not os.path.exists('quora_data/train.csv.zip'):  # V√©rifie si les fichiers sont d√©j√† extraits
            with zipfile.ZipFile('quora-question-pairs.zip', 'r') as zip_ref:
                zip_ref.extractall('quora_data')  # D√©compresse dans quora_data
            print("‚úÖ Extraction de 'quora-question-pairs.zip' termin√©e dans 'quora_data'.")
        else:
            print("üìÇ Les fichiers sont d√©j√† extraits dans 'quora_data'.")
    else:
        print("‚ùå Le fichier 'quora-question-pairs.zip' n'existe pas.")

# D√©compresser les fichiers .zip (train.csv.zip, test.csv.zip, etc.) dans quora_data
def unzip_files():
    zip_file_paths = ['quora_data/train.csv.zip', 'quora_data/test.csv.zip', 'quora_data/sample_submission.csv.zip']
    
    for zip_file in zip_file_paths:
        if os.path.exists(zip_file):  # V√©rifie si le fichier zip existe
            if not os.path.exists(zip_file.replace('.zip', '')):  # V√©rifie si le fichier d√©zipp√© existe d√©j√†
                with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                    zip_ref.extractall('quora_data')  # D√©compresse dans quora_data
                print(f"‚úÖ Extraction de {zip_file} termin√©e dans 'quora_data'.")
            else:
                print(f"üìÇ {zip_file.replace('.zip', '')} existe d√©j√†.")
        else:
            print(f"‚ùå Le fichier {zip_file} n'existe pas.")

# Renommer le fichier test.csv en test2.csv dans le r√©pertoire quora_data
def rename_test_file():
    if os.path.exists('quora_data/test.csv') and not os.path.exists('quora_data/test2.csv'):
        os.rename('quora_data/test.csv', 'quora_data/test2.csv')
        print("‚úÖ Le fichier 'test.csv' a √©t√© renomm√© en 'test2.csv'.")
    elif os.path.exists('quora_data/test2.csv'):
        print("üìÇ 'test2.csv' existe d√©j√†.")
    else:
        print("‚ùå Le fichier 'test.csv' n'a pas √©t√© trouv√© dans 'quora_data'.")

# Supprimer uniquement les fichiers ZIP apr√®s extraction, pas les fichiers CSV
def delete_zip_files():
    zip_file_paths = ['quora-question-pairs.zip', 'quora_data/train.csv.zip', 'quora_data/test.csv.zip', 'quora_data/sample_submission.csv.zip']

    # Supprimer les fichiers ZIP
    for zip_file in zip_file_paths:
        if os.path.exists(zip_file):
            os.remove(zip_file)
            print(f"‚úÖ Le fichier {zip_file} a √©t√© supprim√©.")
        else:
            print(f"üìÇ Le fichier {zip_file} n'existe pas ou a d√©j√† √©t√© supprim√©.")


# Fonction principale
def main():
    # √âtape 1: T√©l√©charger les donn√©es
    download_kaggle_data()

    # √âtape 2: D√©compresser le fichier quora-question-pairs.zip dans quora_data
    unzip_quora_zip()
    
    # √âtape 3: Renommer le fichier test.csv en test2.csv
    rename_test_file()

    # √âtape 4: D√©compresser les fichiers .zip (train.csv.zip, test.csv.zip, etc.) dans quora_data
    unzip_files()

    # √âtape 5: Supprimer les fichiers ZIP et les fichiers d√©zipp√©s apr√®s extraction
    delete_zip_files()

# Appeler la fonction principale
if __name__ == "__main__":
    main()
